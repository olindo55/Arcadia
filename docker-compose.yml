version: '3.8'

services:
  php:
    image: php:8.2-apache
    container_name: php8-2
    ports: 
      - ${SERVER_PORT}:80
    volumes:
      - .:/var/www/html
    build:
      context: .
      dockerfile: DockerFile
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_PORT=${MYSQL_PORT}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_DATABASE=${MONGO_DATABASE}
    depends_on:
      - mysql
      - mongo
    networks:
      - app-network
  
  mysql:
    image: mysql:8.0
    container_name: mysql8
    command: --default-authentication-plugin=mysql_native_password
    environment: 
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      INIT_SQL_FILE: ${INIT_SQL_FILE}
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./arcadia.sql:/arcadia.sql
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - ${PMA_PORT}:80
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ./mongo-data:/data/db
      - ./init-db.js:/docker-entrypoint-initdb.d/init-db.js:ro
      - ./arcadiaMongo.json:/docker-entrypoint-initdb.d/arcadiaMongo.json:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    command: mongod --auth
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/admin --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: always
    depends_on:
      - mysql

networks:
  app-network:
    driver: bridge